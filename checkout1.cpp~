#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "person.cpp"
#include "book.cpp"

using namespace std;

void printMenu();
void readPersons(vector <Person *> & myCardholders);
void readBooks(vector <Book * > & myBooks);
void readRentals(vector <Book * > & myBooks, vector <Person *> & myCardholders);
bool confirmCardholder(vector <Person * > & myCardholders, int cardID);
void confirmBookCheckout(vector < Book * > & myBooks, vector <Person *> & myCardholders, int bookID, int cardID);
void checkCardholders(vector <Person * > & mycardh);




int main() {
  vector<Book *> books;
  vector<Person *> cardholders;

  //fills vectors with current cardholders, available books
  //and which books have been checked out previously
  readPersons(cardholders);
  readBooks(books);
  readRentals(books, cardholders);
  
  int cardID;
  int bookID;  
  int choice;

  checkCardholders(cardholders);


  
  
  do {
    
  
    printMenu();
    
    cin >> choice;
   
    
   
 
    
    switch(choice) {
    case 1: cout << "Please enter the card ID: ";
      cin.clear();
      cin >> cardID;

      
     
      if (confirmCardholder(cardholders, cardID)){

	cin >> bookID;
	confirmBookCheckout(books, cardholders, bookID, cardID);
        
       }
      else{
        break;
	 }
      break;

            case 2:
                // Book return
                break;

            case 3:
                // View all available books
                break;

            case 4:
                // View all outstanding rentals
                break;

            case 5:
                // View outstanding rentals for a cardholder
                break;

            case 6:
                // Open new library card
                break;

            case 7:
                // Close library card
                break;
                
            case 8:
                // update records in files here before exiting the program
                break;

            default:
                cout << "Invalid entry" << endl;
                break;
        }
        cout << endl;
   } while(choice != 8);






  return 0;


}

void printMenu(){
    cout << "----------Library Book Rental System----------" << endl;
    cout << "1.  Book checkout" << endl;
    cout << "2.  Book return" << endl;
    cout << "3.  View all available books" << endl;
    cout << "4.  View all outstanding rentals" << endl;
    cout << "5.  View outstanding rentals for a cardholder" << endl;
    cout << "6.  Open new library card" << endl;
    cout << "7.  Close library card" << endl;
    cout << "8.  Exit system" << endl;
    cout << "Please enter a choice: ";
}


//reads in persons.txt file which holds information about each cardholder
//then saves each Person pointer into the cardholders vector
void readPersons(vector <Person *> & myCardholders){
  Person * personptr;
  int cardNum = 0;
  bool act = 0;
  string firstName = " ";
  string lastName = " ";

 

  
  ifstream inFile;
  inFile.open("persons.txt");

  while ( inFile >> cardNum >> act >> firstName >> lastName) {
    Person * tempPerson = new Person(cardNum, act, firstName, lastName);
    
    personptr = tempPerson;
    delete tempPerson;
   
    if (personptr != NULL){
     
      myCardholders.push_back(personptr);
    }
    
    personptr = NULL;
    
    
    
   
    
  }
  delete personptr;
  inFile.close();
 

   
  
}

void checkCardholders(vector <Person * > & mycardh){
  for ( vector <Person * >:: iterator it = mycardh.begin(); it != mycardh.end(); it++){
    cout << (*it)->fullName()<< endl;
  }
}

  

//reads in books.txt which holds information about each book
//then saves each Book pointer into the books vector
void readBooks(vector <Book * > & myBooks){
  Book * bookPtr;
  int bookID = 0;
  string bookName, author, cat, line, emptyline;
  ifstream inFile;
  inFile.open("books.txt");
  while (!inFile.eof()){
    //reading from file one line at a time, skipping any information on every 5th line

    inFile >> bookID;
    getline(inFile, emptyline, '\n');    
    getline(inFile, bookName, '\n');
    getline(inFile, author, '\n');
    getline(inFile, cat, '\n');
    getline(inFile, emptyline, '\n');
    
    bookPtr = new Book(bookID, bookName, author, cat);
    myBooks.push_back(bookPtr);

    //cout << bookPtr->getId() << " " << bookPtr->getTitle() << " " << bookPtr->getAuthor() << " " << bookPtr->getCategory() << endl;
    delete bookPtr;
    bookPtr = NULL;
  }

  

  inFile.close();
}


//reads in rentals.txt and saves the Person pointer to the myBooks vector
//for each book that has already been rented to specify which cardholder has rented it
void readRentals(vector <Book * > & myBooks, vector <Person *> & myCardholders){

  int bookID, cardID;
 
  
  ifstream inFile;
  inFile.open("rentals.txt");

  while (inFile >> bookID >> cardID) {
    Person *personPtr;
    for (int i = 0; i < myCardholders.size(); i++) {
      if (myCardholders.at(i)->getId() == cardID) {
	personPtr = myCardholders.at(i);
      }
    }
    for (int j = 0; j < myBooks.size(); j++) {
      if (myBooks.at(j)->getId() == bookID) {
	myBooks.at(j)->setPersonPtr(personPtr);
      }
    }

    delete personPtr;
    personPtr = nullptr;
  }

  inFile.close();
}


//confirm if cardID is in system,then confirm if it is active
//if both, print out cardholder name
bool confirmCardholder(vector <Person * > & myCardholders,int cardID) {

  int j = 0;
  
  for ( int i =0; i < myCardholders.size(); i++) {
    if ( myCardholders.at(i)->getId() == cardID) {
      j = i;
    }
        
  }
  if(myCardholders.at(j)->getId() == cardID){
    if (myCardholders.at(j)->isActive()) {
	cout << myCardholders.at(j)-> fullName() << endl;
	return true;
    }
    else{
      cout<< "inactive card ID" << endl;
    }
  }
  else{
    cout << "invalid card ID" << endl;
  }
    
    

  return false;
}


//confirms if book is available by making sure it exists in the system
//as well making sure it has not already been checked out
//if it is available then it allows the cardholder to check the book out
//otherwise it gives a reason why it is not available
void confirmBookCheckout(vector < Book * > & myBooks, vector <Person *> & myCardholders, int bookID, int cardID){
  for (int i = 0; i < myBooks.size(); i++) {
    if (myBooks.at(i)->getId() == bookID){

      if (myBooks[i]->getPersonPtr() ==  nullptr){
	for ( int i =0; i < myCardholders.size(); i++) {
	  if ( myCardholders.at(i)->getId() == cardID) {
	    myBooks.at(i)->setPersonPtr(myCardholders.at(i));
	    cout << "Rental Completed" << endl;
	  }
	}

      }
      else {
	cout << "Book already checked out" << endl;
        
      }

    }
    else {
     cout << "Book ID not found" << endl;
    
      }
  }
}
  
  
