#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include "person.cpp"
#include "book.cpp"

using namespace std;

void printMenu() {
    cout << "----------Library Book Rental System----------" << endl;
    cout << "1.  Book checkout" << endl;
    cout << "2.  Book return" << endl;
    cout << "3.  View all available books" << endl;
    cout << "4.  View all outstanding rentals" << endl;
    cout << "5.  View outstanding rentals for a cardholder" << endl;
    cout << "6.  Open new library card" << endl;
    cout << "7.  Close library card" << endl;
    cout << "8.  Exit system" << endl;
    cout << "Please enter a choice: ";
}


void readBooks(vector<Book *> & myBooks) {
  int book_ID;
  string book_Name;
  string author;
  string category;
  string line;
  string empty_Line;
  
 
  
  ifstream inFile;
  inFile.open("books.txt");
  
  while (!inFile.eof()){
    getline(inFile, line, '\n');
    book_ID = stoi(line);
    getline(inFile, book_Name, '\n');
    getline(inFile, author, '\n');
    getline(inFile, category, '\n');
    getline(inFile, empty_Line, '\n');

    Book * bookptr = new Book(book_ID, book_Name, author, category);

    myBooks.push_back(bookptr);
    delete bookptr;

    
    
  }

  inFile.close();
    
    
}

int readPersons(vector<Person *> & myCardholders) {
  int cardNum;
  bool act;
  string firstName;
  string lastName;
  vector <int> id;
  
 
  
  ifstream inFile;
  inFile.open("persons.txt");
  
  while (inFile >> cardNum >> act >> firstName >> lastName){
    

    Person * personptr = new Person(cardNum, act, firstName, lastName);

    myCardholders.push_back(personptr);
    delete personptr;
    id.push_back(cardNum);
  }

    
    
  

  inFile.close();

  int maxID = *max_element(id.begin(), id.end());

 
  

  return (maxID + 1);
}

bool confirmCardID(vector<Person *> & myCardholders, int cardID) {
  for (int i =0; i < myCardholders.size(); i++) {
    if(myCardholders[i]->getId() == cardID) return true;
  }
  return false;
}

string returnCardholderName(int cardID, vector<Person *> &myCardholders) {
  string name;
  for (int i =0; i < myCardholders.size(); i++) {
    if(myCardholders[i]->getId() == cardID) {
      name = myCardholders[i]->fullName();
      return name;
    }
  }
  return "null";
}
      
  
  

void bookCheckout(vector<Person *> myCardholders,vector< Book *> & myBooks){
  int cardID;
  int bookID;
  cout << "Please enter the card ID: ";
  cin >> cardID;
  cout << "\n";
  
  
  do{
    if (confirmCardID(myCardholders, cardID)) {
      string cardholderName = returnCardholderName(cardID, myCardholders);
      if(cardholderName == "null") {
	cout << "Name not found\n";
      }
      else {
	cout << "Cardholder: " << cardholderName << endl;
      }
    }
    else {
      cout << "invalid card ID, please re-enter ID: ";
      cin >> cardID;
    }
  }while(confirmCardID(myCardholders, cardID) == false);

  cout << "Please enter the book ID: ";
  cin >> bookID;

 Book * bookptr =  BooksearchBook(myBooks, bookID);
 bookptr->
  
}
    
    
    



void readRentals(vector<Book *> & myBooks, vector<Person *> myCardholders) {
  
  return;
}

void openCard(vector<Person *> & myCardholders, int nextID) {
    return;
}

Book * searchBook(vector<Book *> myBooks, int id) {
   for (int i =0; i < myBooks.size(); i++) {
    if(myBooks[i]->getId() == cardID)
      return mybooks[i];
  }
  
    
}


int main()
{
    vector<Book *> books;
    vector<Person *> cardholders;

    
    
    int choice;
    do
    {
        // If you use cin anywhere, don't forget that you have to handle the <ENTER> key that 
        // the user pressed when entering a menu option. This is still in the input stream.
        printMenu();
        cin >> choice;
        switch(choice)
        {
            case 1:
	                
                break;

            case 2:
                // Book return
                break;

            case 3:
                // View all available books
                break;

            case 4:
                // View all outstanding rentals
                break;

            case 5:
                // View outstanding rentals for a cardholder
                break;

            case 6:
                // Open new library card
                break;

            case 7:
                // Close library card
                break;
                
            case 8:
                // Must update records in files here before exiting the program
                break;

            default:
                cout << "Invalid entry" << endl;
                break;
        }
        cout << endl;
   } while(choice != 8);
      return 0;
}
